'''
    作者：yoyo、13510311528
    说明：python（基础语法、控制语句、循环语句、推导式、自定义函数、常用内置函数、文件操作、类、***笔试题***）
'''
###### 一、基础语法：数据类型及常用的内置函数、格式化输出方法 '''
''' 1. 定义两个变量 x, y，值为 3 和 5，输出 x + y 的和 '''

''' 2. 输入两个整数，输出第一个数 10 除以第二个数 3 的余数：1 '''

''' 3. 输入一个数字（正数或负数 -5.9），输出其绝对值 5.9 '''

''' 4. 定义底数 a = 2 和指数 b = 3 两个变量，输出：2^3 = 8 '''

''' 5. 分别使用 % 和 f表达式，输出 number = 3.14159 的整数部分 和 小数部分（保留 3 位） '''

''' 6. 定义变量 s = 'python'，输出其反向形式 'nohtyp' '''

''' 7. 统计字符串 apple 中，字母 p 出现的次数 '''

''' 8. 用户输入一个字符串，如果是回文，输出 True，否则输出 False '''

''' 9. 用户输入一个整数，判断是奇数还是偶数。如：输入 7 ， 输出 "奇数" '''

''' 10. 分别使用 % 和 f表达式格式化输出，我叫 yoyo, 今年 22 岁, 从事的工作是人工智能 '''

''' 11. 已知：lst1 = ['a', 'b', 'c']，lst2 = [1, 2, 3]，输出：{'a': 1, 'b': 2, 'c': 3} '''

''' 12. 已知：lst1 = [1,2,3,4]，lst2 = [3,4,5,6]，输出：[1,2,3,4,5,6] '''

''' 13. 合并两个字典：输入 {'a': 1, 'b': 2} 和 {'b': 3, 'c': 4}，输出 {'a':1, 'b':3, 'c':4} '''

''' 14. 使用 * 解包，输出列表 lst = [19,7,9,13,20,29,3] 的最小值，最大值，以及剩余的列表元素 '''

''' 15. 使用 ** 解包，将 key=['li','liu','wang']，value=1000 添加到 names 的中，结果如下：
    {'job': 'ai', 'names': {'li': 1000, 'liu': 1000, 'wang': 1000}} '''

###### 二、分支语句：if . elif . else .、 if嵌套、三元运算 '''
''' 16. 输入年份，判断年份是否为闰年（能被 4 整除但不能被 100 整除，或能被400整除）'''

''' 17. 请设置密码，要求长度 8 ~ 16 位，首字母为大写，且必须符合标识符字符，否则按要求给出提示 '''

''' 18. 输入分数返回等级。如：90~100 → A、80~89 → B、60~79 → C、<60 → D、若输入超过范围，返回 "无效输入" '''

''' 19. 输入三角形的三边，判断是等边、等腰、还是普通三角形，若无法构成三角形返回错误 '''

''' 20. 输入年、月、日，判断是否为合法日期（考虑闰年 2 月天数） '''

''' 21. 判断 {"name": "yoyo", "age": 20} 用户 yoyo 是否成年（年龄大于18岁），格式输出：{用户}是否成年 '''

''' 22. 输入密码，长度小于 6 为弱；否则字母开头，不含特殊字符为中；字母开头，含特殊字符为强（使用三元运算） '''

''' 23. 输入字符串，如果长度大于5，格式化输出：{字符串}长度为{长度}，否则提示长度不足5（使用三元运算+海象）'''

''' 24. 输入薪资，小于 8000 为初级、8000 ~ 15000 为中级、15000 以上为高级（使用三元运算+海象） '''

''' 25. 删除 lst = [0.5, 0.8, -0.2, 0.6, -0.7] 中绝对值较大的元素（提示三元+海象+max） '''

###### 三、循环语句：range生成整数序列、for 循环、while 循环、break 退出循环、continue 退出当次循环 '''
''' 26. 输入一个包含 1 ~ n 中部分数字的列表（无重复），找出缺失的所有数字（如 [3,5] → [1, 2, 4]）'''

''' 27. 提取 www.python.org 中的每个单词首字母的大写，组成的新字符串 "WPO" '''

''' 28. 输入一个列表 ['a', 'b', 'a', 'c']，返回每个元素出现的次数 {'a':2, 'b':1, 'c':1} '''

''' 29. 统计数组 [[2,5,3,6,3], [1,3,5,1,8], [2,5,9,2,8]] 相同元素出现次数，以字典形式存储 '''

''' 30. 从 100 ~ 500 之间找出前 20 个质数，并计算他们的和（被除数/除数） '''

''' 31. 利用循环生成二维数组 [[1, 2, 3], [4, 5, 6], [7, 8, 9]] '''

''' 32. 将二维数组 [[1, 2, 3], [4, 5, 6], [7, 8, 9]] 进行转置（行、列互换） '''

''' 33. 冒泡排序，对列表 [5, 3, 8, 6] 进行升序排序 '''

''' 34. 杨辉三角：输入行数 n，生成前 n 行杨辉三角 '''

''' 35. 有一个嵌套列表，将其中所有元素扁平化为一个列表，比如：[1,2,[3,4,5],6]  ==> [1,2,3,4,5,6] '''

''' 36. 计算 [5,32,24,22,35,12] 整数数组中的最大值、最小值、及他们的最大公约数 '''

''' 37. 输入一个正整数，用 while 循环分离每个数，并求和（如 123 → 1+2+3=6） '''

''' 38. 输入字符串，用 while 循环逐个字符反转（双指针） '''

''' 39. 字符串压缩，输入 "aaabbcccca"，输出压缩后的字符串 "a3b2c4a1"，若压缩后更长则返回原字符串 '''

''' 40. 零钱兑换：硬币 coins = [1, 2, 5]，输入金额 amount，返回：{硬币：个数} '''

###### 四、推导式：元组、列表、字典、集合 '''
''' 41. 找出所有水仙花数（个位^3+十位^3+百位^3=本身），计算他们的和 '''

''' 42. 从 text 文本中，提取长度为偶数的单词，返回到列表中 '''

''' 43. 将二维数组扁平化，并过滤负值 '''

''' 44. 构造一个 3 * 3 的矩阵：[[1, 2, 3], [2, 4, 6], [3, 6, 9]] '''

''' 45. 统计每个单词首字母出现的次数，以字典形式返回 {字母：次数} '''

###### 五、自定义函数 '''
''' 46. 输入一个字符串，找出字符串中出现次数最多的元素，返回到列表（若有多个返回所有） '''

''' 47. 检测密码强度，规则长度<6-->弱。长度≥6且包含字母和数字-->中。长度≥8，包含字母、数字和特殊符号-->强 '''

''' 48. 计算 2 个矩阵的乘积（行列相乘再相加）（乘积符合：m1的列与m2的行一致，返回m1的行，m2的列，如：2*3 @ 3*4 => 2*4） '''

''' 49. 输入 [[1,2],[3,4]] 返回转置后的矩阵 [[1,3],[2,4]] '''

''' 50. 找出 100 以内的卡普雷卡数，如：45 的平方 2025 = 20 + 25 '''

###### 六、lambda函数（sorted、filter、map、all/any、max/min、sum、reduce）'''
''' 51. 对 [-5, 3, -2, 1] 列表的元素，按绝对值升序排序 → [1, -2, 3, -5] '''

''' 52. 对字典列表的多级排序：[{'name':'yoyo','age':25}, ...] 按 age 降序、name 升序排序 '''

''' 53. 从列表 ["madam", "hello", "level"] 中筛选回文 → ["madam", "level"] '''

''' 54. 从元组列表 [(1,'a'), (2,'b')] 中提取第二个元素 → ['a','b'] '''

''' 55. 统计 ["hello", "python", "conda", "pycharm"] 列表中的元素，按长度分类成字典。如：{1: ...,2: ...} '''

''' 56. 实现递归阶乘（提示：需使用海象运算符 或者 reduce） '''

''' 57. 将 [[1,2],[3,4],[5]] 二维列表扁平化为 [1,2,3,4] '''

''' 58. 判断超级素数，如：23 有 2 和 3 两个素数组成 '''

''' 59. 输入一个数字，生成多个幂函数。如：10，返回[10，100，1000，10000，100000] '''

''' 60. 自定义一个高级函数 fun(data,func)，从列表中过滤满足条件的元素（筛选偶数：lambda x: x%2==0） '''

###### 七、递归函数、迭代器 iter、生成器 yield、闭包函数、函数装饰器 '''
''' 61. 使用递归实现：输入字符串，返回字符串所有可能的排列，如 "abc" → ["abc", "acb", ...]）'''

''' 62. 使用递归实现：判断是否为回文字符串，忽略大小写，以及非字母数字。返回是 True、False'''

''' 63. 使用 iter 创建迭代器对象：判断字典列表中，用户的密码复杂度，返回字典{用户名：复杂度}
    规则：字母、数字、特殊字符。只含1种 -> 弱。含2种 -> 中。只含3种 -> 强 '''

''' 64. 使用 iter 实现猜数字的游戏，要求记录次数并限定最大次数 5，以及提示范围 '''

''' 65. 使用 yield 从列表 lst = [1,2,3,4,5,6,7,8,9,10] 中，生成 3 个元素的所有子列表。
    如：[1,2,3]，[2,3,4] ... [8,9,10] '''

''' 66. 使用 yield 生成器实现密码生成函数，长度8，必须包含大写、小写字母、数字、特殊字符 '''

''' 67. 创建闭包，实现数据集的划分，用于演示训练结果（train、test 或 train、val、test）'''

''' 68. 用 lambda 创建闭包，实现计数器功能（每次调用返回值递增 1）'''

''' 69. 函数装饰器：统计递归函数（二进制）调用的次数，并记录每次调用日志（函数名、参数、返回值、调用层级） '''

''' 70. 函数装饰器：记录函数参数不定的运行时间，以及每次调用日志（函数名、参数、返回值、调用次数）并保存到 logs 文件中 
    如：fun(1, 2, 3, 4, 5, divisor=5)  return (1+2+3+4+5) * divisor '''

###### 八、文件操作 with、shutil、json格式、csv格式、图片文件 '''
''' 71. 创建目录 txt_files，生成 100个文本，并向文件中随机写入20个字母（含大小写），文件名格式为 test_001.txt '''

''' 72. 备份上面的 100 个文件，并删除文件内容中不含字母 a 的文件，返回删除文件的路径 '''

''' 73. 从上面 100 个文件内容中，统计字母（忽略大小写）出现的次数，保存为 json 格式，并修改文件名为 json 文件 '''

''' 74. 模拟训练 10 个 epoch 数据（如loss,accuracy,precision,recall），将结果保存到 csv 中 '''

''' 75. 统一图片文件的格式 png：将（'.png', '.gif', '.bmp', '.jpg', '.jpeg'） '''

###### 九、类、类装饰器、魔法函数 __iter__、__getitem__、__call__'''
''' 76. 定义类，实现从一个 5×5 的二维数组中滑动窗口提取所有子集，要求支持任意窗口以及步长 '''

''' 77. 定义类，使用继承对下面的二维列表中数据实现 max_min 最大最小归一化和 Z-scores 动态归一化）
#     max_min归一化，公式：(x − min) / (max − min)
#     Z-scores动态归一化，公式：1 / (1 + x) '''

''' 78. 定义类装饰器，记录函数运行时间 '''

''' 79. 训练过程的迭代器 iter ：在训练模型时，可以创建一个迭代器来模拟训练过程中的每个 epoch 
#     一个 epoch 是指完整遍历一次数据集，数据集可分多个 batch '''

''' 80. 数据批处理迭代器：在训练模型时，通常需要按批次处理数据，划分 batch 。
#     比如训练 data 为 [1 ~ 20]，每隔 batch_size 为 5 次输出一组数据 '''

''' 81. 改进第 80 题，将数据改为无限循环给 batch 喂数据（数据随机打乱）。'''

''' 82. 定义数据集类：通过索引访问单个样本，每个样本是由一个元组（x, x^2）组成 '''

''' 83. 定义图像数据集类：从 image_dir 目录中加载图像数据，并可以调整图片的大小 
#     再训练时，有时需要对图片进行裁剪大小（不同的图片格式，必须使用 PIL 库统一格式） '''

''' 84. 定义损失函数类：便于计算损失时直接使用损失函数（方差）
#     方差：如 [1,2,3,4] = ((1-2.5)^2 + (2-2.5)^2 + (3-2.5)^2+ (4-2.5)^2)/4 = 1.25 '''

''' 85. 定义线性模型类：计算 y = w * x + b 的结果，其中 x = [1,2,3,4,5] , w = 2.0, b=0.1 '''

''' 86. 实现一个神经网络模型类，支持线性计算 y = w * x + b，通过参数选择激活函数（relu 或 sigmoid），并可像函数一样进行前向传播。
        激活函数 relu ==> def relu(x): return max(0, x)
        激活函数 sigmoid ==>  def sigmoid(x): return 1 / (1 + math.exp(-x)) '''

''' 87. 定义特征提取器类：用来提取数据 data 的最大值，平均值，标准差，以字典格式返回 '''

''' 88. 定义类装饰器：实现统计函数调用次数 '''

''' 89. 定义类装饰器：实现统计函数运行时间'''

''' 90. 定义带参数的类装饰器：当训练过程 100 个 epoch，每隔 10 个 epoch 记录一次日志 '''

###### 十、 面试笔试题 '''
''' 91. 给定一个整数数组 arr1 和一个整数目标值 target，请你在该数组中找出所有和为目标值的那两个整数，并返回下标
#     比如：arr=[21, 11, 23, 25, 33, 28]	   target=44		输出：{num: [21, 23],index: [0, 2] '''

''' 92. 给定一个字符串 s ，请你找出其中不含有重复字符串的最长子串的长度.
#     比如：s = abcabcdacbdebc    输出：acbde '''

''' 93. 计算从 0 到 n (含 n) 中数字 2 出现的次数。比如：输入 25，次数 9。 [2,12,20,21,22,23,24,25] '''

''' 94. 使用双指针：验证字符串是否为回文 '''

''' 95. 二分查找：在有序列表中查找目标值的索引，没找到返回 -1。
    如：nums = [1, 3, 5, 7, 9] target = 7 返回 3 。nums = [1, 3, 5, 7, 9] target = 11 返回 -1'''

''' 96. 二分查找：给定两个大小分别为 arr2 和 arr3 的数组（从小到大）。请你找出并返回这两个数组的中位数
#     比如：arr1 = [1, 3, 6]，arr2 = [2, 5, 7, 9]  中位数：5 '''

''' 97. 输入股价列表 [7, 1, 5, 3, 6, 4]，计算一次交易的最大利润。输出：，在 1 买 6 卖，最大利润 5。'''

''' 98. 输入列表 [1,3,5,1,0,3,1,1,5,2,8]，返回最长递增子序列的长度 4，序列 [0, 1, 2, 8]'''

''' 99. 动态规划：实现零钱兑换，硬币 coins = [1,2,5] ，金额 amount = 9，返回 [2,2,5]'''

''' 100. 接雨水：给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。
#     height = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1] ， res = 6 '''



def find_sub_arr_sum(arr, target):
    res = []
    left = 0
    current_sum = 0

    for right in range(len(arr)):
        current_sum += arr[right]           # 扩展窗口（向右加数）

        while current_sum > target and left <= right:
            current_sum -= arr[left]        # 缩小窗口，直到和小于等于 target
            left += 1

        if current_sum == target:       # 如果找到了满足条件的窗口
            res.append({"子数组": arr[left:right + 1], "索引": [left, right]})

    return res


if __name__ == '__main__':
    arr = [2,3,1,2,4,3]
    target = 7
    print(find_sub_arr_sum(arr,target))