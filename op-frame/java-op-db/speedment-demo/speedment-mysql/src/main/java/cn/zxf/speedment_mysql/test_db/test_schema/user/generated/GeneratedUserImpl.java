package cn.zxf.speedment_mysql.test_db.test_schema.user.generated;

import cn.zxf.speedment_mysql.test_db.test_schema.user.User;
import com.speedment.common.annotation.GeneratedCode;
import java.util.Objects;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * cn.zxf.speedment_mysql.test_db.test_schema.user.User}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedUserImpl implements User {
    
    private long id;
    private String name;
    private int age;
    
    protected GeneratedUserImpl() {
        
    }
    
    @Override
    public long getId() {
        return id;
    }
    
    @Override
    public String getName() {
        return name;
    }
    
    @Override
    public int getAge() {
        return age;
    }
    
    @Override
    public User setId(long id) {
        this.id = id;
        return this;
    }
    
    @Override
    public User setName(String name) {
        this.name = name;
        return this;
    }
    
    @Override
    public User setAge(int age) {
        this.age = age;
        return this;
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "   + Objects.toString(getId()));
        sj.add("name = " + Objects.toString(getName()));
        sj.add("age = "  + Objects.toString(getAge()));
        return "UserImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof User)) { return false; }
        final User thatUser = (User)that;
        if (this.getId() != thatUser.getId()) {return false; }
        if (!Objects.equals(this.getName(), thatUser.getName())) {return false; }
        if (this.getAge() != thatUser.getAge()) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Long.hashCode(getId());
        hash = 31 * hash + Objects.hashCode(getName());
        hash = 31 * hash + Integer.hashCode(getAge());
        return hash;
    }
}